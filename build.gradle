import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'maven-publish'
    id 'signing'
}

group 'io.vproxy'
version loadVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'io.vproxy'
    version loadVersion()

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

project(':api') {
    dependencies {
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifactId 'pojo-agent-api'

                pom {
                    name = 'pojo-agent-api'
                    description = 'A tool which enhances your pojo, powered by java-agent.'
                    url = 'https://github.com/wkgcass/pojo-agent'
                    licenses {
                        license {
                            name = 'GPLv2'
                            url = 'https://github.com/wkgcass/pojo-agent/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'wkgcass'
                            name = 'K.G. Wang'
                            email = 'wkgcass@hotmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/wkgcass/pojo-agent.git'
                        developerConnection = 'scm:git:git://github.com/wkgcass/pojo-agent.git'
                        url = 'https://github.com/wkgcass/pojo-agent'
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username 'wkgcass'
                    password System.getProperty("MavenPublishPassword")
                }
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.contains('-DEV') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
    signing {
        sign publishing.publications.maven
    }
}

project(':agent') {
    dependencies {
        api project(':api')
    }
}

project(':all') {
    dependencies {
        api project(':api')
        api project(':agent')
    }
}

project(':sample') {
    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.5.31'
        implementation project(":api")
    }

    task sample(type: JavaExec) {
        jvmArgs "-javaagent:${rootProject.buildDir.getAbsolutePath()}${File.separator}libs${File.separator}pojo-agent.jar"
if (!JavaVersion.current().toString().startsWith('1.')) {
        jvmArgs "--add-opens"
        jvmArgs "java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED"
        jvmArgs "--add-opens"
        jvmArgs "java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED"
}
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'my.test.Main'

        dependsOn(rootProject.jar)
    }

    task ktsample(type: JavaExec) {
        jvmArgs "-javaagent:${rootProject.buildDir.getAbsolutePath()}${File.separator}libs${File.separator}pojo-agent.jar"
if (!JavaVersion.current().toString().startsWith('1.')) {
        jvmArgs "--add-opens"
        jvmArgs "java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED"
        jvmArgs "--add-opens"
        jvmArgs "java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED"
}
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'my.test.kt.Main'

        dependsOn(rootProject.jar)
    }
}

project(':test') {
    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
        implementation project(":api")
    }

    task suite(type: Test) {
        testLogging {
            events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED
            maxGranularity 100
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }

        include '**/Suite1.class'

        jvmArgs "-javaagent:${rootProject.buildDir.getAbsolutePath()}${File.separator}libs${File.separator}pojo-agent.jar"
if (!JavaVersion.current().toString().startsWith('1.')) {
        jvmArgs "--add-opens"
        jvmArgs "java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED"
        jvmArgs "--add-opens"
        jvmArgs "java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED"
}

        dependsOn(rootProject.jar)
    }
}

dependencies {
    api project(':all')
}

jar {
    archiveName 'pojo-agent.jar'
    manifest {
        attributes 'Premain-Class': 'io.vproxy.pojoagent.agent.Premain'
        attributes 'Agent-Class': 'io.vproxy.pojoagent.agent.Premain'
    }
    exclude 'module-info.class'
    from {
        configurations.runtimeClasspath.collect {
            if (!it.name.endsWith("pojo-agent-api.jar") && !it.name.endsWith("pojo-agent-agent.jar"))
                return null
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy 'exclude'

    dependsOn(project(':api').jar)
    dependsOn(project(':agent').jar)
}

def loadVersion() {
    def PREFIX = "public static final String VERSION = \""
    def SUFFIX = "\"; // _THE_VERSION_"
    def ver = file(rootProject.projectDir.getAbsolutePath() + "/api/src/main/java/io/vproxy/pojoagent/api/Version.java")
    def lines = ver.getText().split("\n")
    for (def line : lines) {
        line = line.trim()
        if (line.startsWith(PREFIX) && line.endsWith(SUFFIX)) {
            return line.substring(PREFIX.length(), line.length() - SUFFIX.length())
        }
    }
    return "unknown"
}
